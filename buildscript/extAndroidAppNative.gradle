//group = "io.jopitel.android.nproject"
//version = "0.0.1"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
  // - 자동서명 방법1 : 코드 공유시 다른 사람이 내 키 정보를 볼수 있다
  signingConfigs {
    config {
      keyAlias 'jopitelkey'
      keyPassword 'tkrkfWH#0070'
      storeFile file('/Users/magmajo/.android/jopitel.jks')
      storePassword 'tkrkfWH#0070'
    }
  }
  // https://developer.android.com/studio/publish/app-signing?hl=ko
  // - 수동서명 : Build -> Generate Signed APK 실행
  /*
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    signingConfigs {
      config {
        // - 자동서명 방법2 : 코드 공유시 다른 사람이 내 키 정보가 보호 된다
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
        storeFile file(keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
      }
    }
  */

  compileSdkVersion paramCompileSdk
  defaultConfig {
    applicationId paramApplicationId
    minSdkVersion paramMinSdk
    targetSdkVersion paramTargetSdk
    versionCode paramVersionCode
    versionName paramVersionName

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    sourceSets {
      main.java.srcDirs += 'src/main/kotlin'
      test.java.srcDirs += 'src/test/kotlin'
      androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    externalNativeBuild {
      cmake {
        //cppFlags "-std=c++14 -frtti -fexceptions"
        cppFlags "-std=c++14 -frtti -fexceptions"
        // https://developer.android.com/ndk/guides/cmake.html#variables
        // Use the following syntax when passing arguments to variables:
        // arguments "-DVAR_NAME=VALUE"
        // ------------------- ANSWER -------------------
        arguments "-DANDROID_STL=c++_shared"//, "-DANDROID_PLATFORM=android-16"
      }
    }

    ndk {
      // Specifies the ABI configurations of your native
      // libraries Gradle should build and package with your APK.
      // abiFilters 'armeabi-v7a', 'x86' // , 'x86_64', 'arm64-v8a'
      //stl "c++_static"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  externalNativeBuild {
    cmake {
      path "src/main/cpp/CMakeLists.txt"
      //path "CMakeLists.txt"
    }
  }

  // hjjo:20171108 - For using lambda
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    abortOnError false
  }

  dexOptions {
    jumboMode true
    javaMaxHeapSize "4g"
  }

  // hjjo:20171108 - For using jniLibs
  repositories {
    mavenCentral()
    flatDir {
      dirs 'libs'
    }
  }

  // https://stackoverflow.com/questions/34802667/unit-test-java-class-that-loads-native-library/46439968#46439968
  /*
  testOptions {
    unitTests {
      all {
        def libpath = '' + projectDir + '/build/intermediates/cmake/debug/obj/armeabi-v7a' + ':/home/developer/my-project/some-sdk/lib'
        environment 'LD_LIBRARY_PATH', libpath
      }
    }
  }
  sourceSets.main {
    jniLibs.srcDir 'src/main/libs'
    jni.srcDirs = []
  }
  useLibrary 'org.apache.http.legacy'
  */
}

/**
 * module base plugin
 */
apply from: "$rootProject.rootDir/buildscript/extModuleBase.gradle"